{"remainingRequest":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\src\\components\\Stock.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\src\\components\\Stock.vue","mtime":1614924310777},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgY2hhcnRJbnN0YW5jZTogbnVsbCwKICAgICAgYWxsRGF0YTogbnVsbCwKICAgICAgY3VycmVudEluZGV4OiAwLCAvLyDlvZPliY3mmL7npLrnmoTmlbDmja4KICAgICAgdGltZXJJZDogbnVsbCAvLyDlrprml7blmajnmoTmoIfor4YKICAgIH0KICB9LAogIGNyZWF0ZWQgKCkgewogICAgLy8g5Zyo57uE5Lu25Yib5bu65a6M5oiQ5LmL5ZCOIOi/m+ihjOWbnuiwg+WHveaVsOeahOazqOWGjAogICAgdGhpcy4kc29ja2V0LnJlZ2lzdGVyQ2FsbEJhY2soJ3N0b2NrRGF0YScsIHRoaXMuZ2V0RGF0YSkKICB9LAogIG1vdW50ZWQgKCkgewogICAgdGhpcy5pbml0Q2hhcnQoKQogICAgLy8gdGhpcy5nZXREYXRhKCkKICAgIHRoaXMuJHNvY2tldC5zZW5kKHsKICAgICAgYWN0aW9uOiAnZ2V0RGF0YScsCiAgICAgIHNvY2tldFR5cGU6ICdzdG9ja0RhdGEnLAogICAgICBjaGFydE5hbWU6ICdzdG9jaycsCiAgICAgIHZhbHVlOiAnJwogICAgfSkKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpCiAgICB0aGlzLnNjcmVlbkFkYXB0ZXIoKQogIH0sCiAgZGVzdHJveWVkICgpIHsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpCiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXJJZCkKICAgIHRoaXMuJHNvY2tldC51blJlZ2lzdGVyQ2FsbEJhY2soJ3N0b2NrRGF0YScpCiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0Q2hhcnQgKCkgewogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UgPSB0aGlzLiRlY2hhcnRzLmluaXQodGhpcy4kcmVmcy5zdG9ja19yZWYsIHRoaXMudGhlbWUpCiAgICAgIGNvbnN0IGluaXRPcHRpb24gPSB7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHQ6ICfwn6ehIOW6k+WtmOWSjOmUgOmHj+WIhuaekCcsCiAgICAgICAgICBsZWZ0OiAyMCwKICAgICAgICAgIHRvcDogMjAKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihpbml0T3B0aW9uKQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uub24oJ21vdXNlb3ZlcicsICgpID0+IHsKICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXJJZCkKICAgICAgfSkKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLm9uKCdtb3VzZW91dCcsICgpID0+IHsKICAgICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWwoKQogICAgICB9KQogICAgfSwKICAgIGdldERhdGEgKHJldCkgewogICAgICAvLyDojrflj5bmnI3liqHlmajnmoTmlbDmja4sIOWvuXRoaXMuYWxsRGF0Yei/m+ihjOi1i+WAvOS5i+WQjiwg6LCD55SodXBkYXRlQ2hhcnTmlrnms5Xmm7TmlrDlm77ooagKICAgICAgLy8gY29uc3QgeyBkYXRhOiByZXQgfSA9IGF3YWl0IHRoaXMuJGh0dHAuZ2V0KCdzdG9jaycpCiAgICAgIHRoaXMuYWxsRGF0YSA9IHJldAogICAgICBjb25zb2xlLmxvZyh0aGlzLmFsbERhdGEpCiAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKQogICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWwoKQogICAgfSwKICAgIHVwZGF0ZUNoYXJ0ICgpIHsKICAgICAgY29uc3QgY2VudGVyQXJyID0gWwogICAgICAgIFsnMTglJywgJzQwJSddLAogICAgICAgIFsnNTAlJywgJzQwJSddLAogICAgICAgIFsnODIlJywgJzQwJSddLAogICAgICAgIFsnMzQlJywgJzc1JSddLAogICAgICAgIFsnNjYlJywgJzc1JSddCiAgICAgIF0KICAgICAgY29uc3QgY29sb3JBcnIgPSBbCiAgICAgICAgWycjNEZGNzc4JywgJyMwQkE4MkMnXSwKICAgICAgICBbJyNFNURENDUnLCAnI0U4QjExQyddLAogICAgICAgIFsnI0U4ODIxQycsICcjRTU1NDQ1J10sCiAgICAgICAgWycjNTA1MkVFJywgJyNBQjZFRTUnXSwKICAgICAgICBbJyMyM0U1RTUnLCAnIzJFNzJCRiddCiAgICAgIF0KICAgICAgLy8g5aSE55CG5Zu+6KGo6ZyA6KaB55qE5pWw5o2uCiAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5jdXJyZW50SW5kZXggKiA1CiAgICAgIGNvbnN0IGVuZCA9ICh0aGlzLmN1cnJlbnRJbmRleCArIDEpICogNQogICAgICBjb25zdCBzaG93RGF0YSA9IHRoaXMuYWxsRGF0YS5zbGljZShzdGFydCwgZW5kKQogICAgICBjb25zdCBzZXJpZXNBcnIgPSBzaG93RGF0YS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHR5cGU6ICdwaWUnLAogICAgICAgICAgY2VudGVyOiBjZW50ZXJBcnJbaW5kZXhdLAogICAgICAgICAgaG92ZXJBbmltYXRpb246IGZhbHNlLCAvLyDlhbPpl63pvKDmoIfnp7vlhaXliLDppbzlm77ml7bnmoTliqjnlLvmlYjmnpwKICAgICAgICAgIGxhYmVsTGluZTogewogICAgICAgICAgICBzaG93OiBmYWxzZSAvLyDpmpDol4/mjIfnpLrnur8KICAgICAgICAgIH0sCiAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcicsCiAgICAgICAgICAgIGNvbG9yOiBjb2xvckFycltpbmRleF1bMF0KICAgICAgICAgIH0sCiAgICAgICAgICBkYXRhOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUgKyAnXG5cbicgKyBpdGVtLnNhbGVzLAogICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnNhbGVzLAogICAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6IG5ldyB0aGlzLiRlY2hhcnRzLmdyYXBoaWMuTGluZWFyR3JhZGllbnQoMCwgMSwgMCwgMCwgWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvckFycltpbmRleF1bMF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG9mZnNldDogMSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JBcnJbaW5kZXhdWzFdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uc3RvY2ssCiAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogJyMzMzM4NDMnCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICB9KQogICAgICBjb25zdCBkYXRhT3B0aW9uID0gewogICAgICAgIHNlcmllczogc2VyaWVzQXJyCiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihkYXRhT3B0aW9uKQogICAgfSwKICAgIHNjcmVlbkFkYXB0ZXIgKCkgewogICAgICBjb25zdCB0aXRsZUZvbnRTaXplID0gdGhpcy4kcmVmcy5zdG9ja19yZWYub2Zmc2V0V2lkdGggLyAxMDAgKiAzLjYKICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSB0aXRsZUZvbnRTaXplICogMi44CiAgICAgIGNvbnN0IG91dHRlclJhZGl1cyA9IGlubmVyUmFkaXVzICogMS4xMjUKICAgICAgY29uc3QgYWRhcHRlck9wdGlvbiA9IHsKICAgICAgICB0aXRsZTogewogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGZvbnRTaXplOiB0aXRsZUZvbnRTaXplCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgdHlwZTogJ3BpZScsCiAgICAgICAgICAgIHJhZGl1czogW291dHRlclJhZGl1cywgaW5uZXJSYWRpdXNdLAogICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgIGZvbnRTaXplOiB0aXRsZUZvbnRTaXplIC8gMgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICB0eXBlOiAncGllJywKICAgICAgICAgICAgcmFkaXVzOiBbb3V0dGVyUmFkaXVzLCBpbm5lclJhZGl1c10sCiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgZm9udFNpemU6IHRpdGxlRm9udFNpemUgLyAyCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIHR5cGU6ICdwaWUnLAogICAgICAgICAgICByYWRpdXM6IFtvdXR0ZXJSYWRpdXMsIGlubmVyUmFkaXVzXSwKICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICBmb250U2l6ZTogdGl0bGVGb250U2l6ZSAvIDIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgdHlwZTogJ3BpZScsCiAgICAgICAgICAgIHJhZGl1czogW291dHRlclJhZGl1cywgaW5uZXJSYWRpdXNdLAogICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgIGZvbnRTaXplOiB0aXRsZUZvbnRTaXplIC8gMgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICB0eXBlOiAncGllJywKICAgICAgICAgICAgcmFkaXVzOiBbb3V0dGVyUmFkaXVzLCBpbm5lclJhZGl1c10sCiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgZm9udFNpemU6IHRpdGxlRm9udFNpemUgLyAyCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihhZGFwdGVyT3B0aW9uKQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UucmVzaXplKCkKICAgIH0sCiAgICBzdGFydEludGVydmFsICgpIHsKICAgICAgaWYgKHRoaXMudGltZXJJZCkgewogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcklkKQogICAgICB9CiAgICAgIHRoaXMudGltZXJJZCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCsrCiAgICAgICAgaWYgKHRoaXMuY3VycmVudEluZGV4ID4gMSkgewogICAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSAwCiAgICAgICAgfQogICAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKSAvLyDlnKjmm7TmlLnlroxjdXJyZW50SW5kZXjkuYvlkI4gLCDpnIDopoHmm7TmlrDnlYzpnaIKICAgICAgfSwgNTAwMCkKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZShbJ3RoZW1lJ10pCiAgfSwKICB3YXRjaDogewogICAgdGhlbWUgKCkgewogICAgICBjb25zb2xlLmxvZygn5Li76aKY5YiH5o2i5LqGJykKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLmRpc3Bvc2UoKSAvLyDplIDmr4HlvZPliY3nmoTlm77ooagKICAgICAgdGhpcy5pbml0Q2hhcnQoKSAvLyDph43mlrDku6XmnIDmlrDnmoTkuLvpopjlkI3np7DliJ3lp4vljJblm77ooajlr7nosaEKICAgICAgdGhpcy5zY3JlZW5BZGFwdGVyKCkgLy8g5a6M5oiQ5bGP5bmV55qE6YCC6YWNCiAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKSAvLyDmm7TmlrDlm77ooajnmoTlsZXnpLoKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Stock.vue"],"names":[],"mappingsfile":"Stock.vue","sourceRoot":"src/components","sourcesContent":["<!-- 库存销量分析 -->\n<template>\n  <div class='com-container'>\n    <div class='com-chart' ref='stock_ref'></div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  data () {\n    return {\n      chartInstance: null,\n      allData: null,\n      currentIndex: 0, // 当前显示的数据\n      timerId: null // 定时器的标识\n    }\n  },\n  created () {\n    // 在组件创建完成之后 进行回调函数的注册\n    this.$socket.registerCallBack('stockData', this.getData)\n  },\n  mounted () {\n    this.initChart()\n    // this.getData()\n    this.$socket.send({\n      action: 'getData',\n      socketType: 'stockData',\n      chartName: 'stock',\n      value: ''\n    })\n    window.addEventListener('resize', this.screenAdapter)\n    this.screenAdapter()\n  },\n  destroyed () {\n    window.removeEventListener('resize', this.screenAdapter)\n    clearInterval(this.timerId)\n    this.$socket.unRegisterCallBack('stockData')\n  },\n  methods: {\n    initChart () {\n      this.chartInstance = this.$echarts.init(this.$refs.stock_ref, this.theme)\n      const initOption = {\n        title: {\n          text: '🧡 库存和销量分析',\n          left: 20,\n          top: 20\n        }\n      }\n      this.chartInstance.setOption(initOption)\n      this.chartInstance.on('mouseover', () => {\n        clearInterval(this.timerId)\n      })\n      this.chartInstance.on('mouseout', () => {\n        this.startInterval()\n      })\n    },\n    getData (ret) {\n      // 获取服务器的数据, 对this.allData进行赋值之后, 调用updateChart方法更新图表\n      // const { data: ret } = await this.$http.get('stock')\n      this.allData = ret\n      console.log(this.allData)\n      this.updateChart()\n      this.startInterval()\n    },\n    updateChart () {\n      const centerArr = [\n        ['18%', '40%'],\n        ['50%', '40%'],\n        ['82%', '40%'],\n        ['34%', '75%'],\n        ['66%', '75%']\n      ]\n      const colorArr = [\n        ['#4FF778', '#0BA82C'],\n        ['#E5DD45', '#E8B11C'],\n        ['#E8821C', '#E55445'],\n        ['#5052EE', '#AB6EE5'],\n        ['#23E5E5', '#2E72BF']\n      ]\n      // 处理图表需要的数据\n      const start = this.currentIndex * 5\n      const end = (this.currentIndex + 1) * 5\n      const showData = this.allData.slice(start, end)\n      const seriesArr = showData.map((item, index) => {\n        return {\n          type: 'pie',\n          center: centerArr[index],\n          hoverAnimation: false, // 关闭鼠标移入到饼图时的动画效果\n          labelLine: {\n            show: false // 隐藏指示线\n          },\n          label: {\n            position: 'center',\n            color: colorArr[index][0]\n          },\n          data: [\n            {\n              name: item.name + '\\n\\n' + item.sales,\n              value: item.sales,\n              itemStyle: {\n                color: new this.$echarts.graphic.LinearGradient(0, 1, 0, 0, [\n                  {\n                    offset: 0,\n                    color: colorArr[index][0]\n                  },\n                  {\n                    offset: 1,\n                    color: colorArr[index][1]\n                  }\n                ])\n              }\n            },\n            {\n              value: item.stock,\n              itemStyle: {\n                color: '#333843'\n              }\n            }\n          ]\n        }\n      })\n      const dataOption = {\n        series: seriesArr\n      }\n      this.chartInstance.setOption(dataOption)\n    },\n    screenAdapter () {\n      const titleFontSize = this.$refs.stock_ref.offsetWidth / 100 * 3.6\n      const innerRadius = titleFontSize * 2.8\n      const outterRadius = innerRadius * 1.125\n      const adapterOption = {\n        title: {\n          textStyle: {\n            fontSize: titleFontSize\n          }\n        },\n        series: [\n          {\n            type: 'pie',\n            radius: [outterRadius, innerRadius],\n            label: {\n              fontSize: titleFontSize / 2\n            }\n          },\n          {\n            type: 'pie',\n            radius: [outterRadius, innerRadius],\n            label: {\n              fontSize: titleFontSize / 2\n            }\n          },\n          {\n            type: 'pie',\n            radius: [outterRadius, innerRadius],\n            label: {\n              fontSize: titleFontSize / 2\n            }\n          },\n          {\n            type: 'pie',\n            radius: [outterRadius, innerRadius],\n            label: {\n              fontSize: titleFontSize / 2\n            }\n          },\n          {\n            type: 'pie',\n            radius: [outterRadius, innerRadius],\n            label: {\n              fontSize: titleFontSize / 2\n            }\n          }\n        ]\n      }\n      this.chartInstance.setOption(adapterOption)\n      this.chartInstance.resize()\n    },\n    startInterval () {\n      if (this.timerId) {\n        clearInterval(this.timerId)\n      }\n      this.timerId = setInterval(() => {\n        this.currentIndex++\n        if (this.currentIndex > 1) {\n          this.currentIndex = 0\n        }\n        this.updateChart() // 在更改完currentIndex之后 , 需要更新界面\n      }, 5000)\n    }\n  },\n  computed: {\n    ...mapState(['theme'])\n  },\n  watch: {\n    theme () {\n      console.log('主题切换了')\n      this.chartInstance.dispose() // 销毁当前的图表\n      this.initChart() // 重新以最新的主题名称初始化图表对象\n      this.screenAdapter() // 完成屏幕的适配\n      this.updateChart() // 更新图表的展示\n    }\n  }\n}\n</script>\n\n<style lang='less' scoped>\n</style>\n"]}]}