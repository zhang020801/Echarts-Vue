{"remainingRequest":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\src\\components\\Trend.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\src\\components\\Trend.vue","mtime":1614924310811},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKaW1wb3J0IHsgZ2V0VGhlbWVWYWx1ZSB9IGZyb20gJ0AvdXRpbHMvdGhlbWVfdXRpbHMnCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGNoYXJ0SW5zdGFuZTogbnVsbCwKICAgICAgYWxsRGF0YTogbnVsbCwgLy8g5LuO5pyN5Yqh5Zmo5Lit6I635Y+W55qE5omA5pyJ5pWw5o2uCiAgICAgIHNob3dDaG9pY2U6IGZhbHNlLCAvLyDmmK/lkKbmmL7npLrlj6/pgInpobkKICAgICAgY2hvaWNlVHlwZTogJ21hcCcsIC8vIOaYvuekuueahOaVsOaNruexu+WeiwogICAgICB0aXRsZUZvbnRTaXplOiAwIC8vIOaMh+aYjuagh+mimOeahOWtl+S9k+Wkp+WwjwogICAgfQogIH0sCiAgY3JlYXRlZCAoKSB7CiAgICAvLyDlnKjnu4Tku7bliJvlu7rlrozmiJDkuYvlkI4g6L+b6KGM5Zue6LCD5Ye95pWw55qE5rOo5YaMCiAgICB0aGlzLiRzb2NrZXQucmVnaXN0ZXJDYWxsQmFjaygndHJlbmREYXRhJywgdGhpcy5nZXREYXRhKQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICB0aGlzLmluaXRDaGFydCgpCiAgICAvLyB0aGlzLmdldERhdGEoKQogICAgLy8g5Y+R6YCB5pWw5o2u57uZ5pyN5Yqh5ZmoLCDlkYror4nmnI3liqHlmagsIOaIkeeOsOWcqOmcgOimgeaVsOaNrgogICAgdGhpcy4kc29ja2V0LnNlbmQoewogICAgICBhY3Rpb246ICdnZXREYXRhJywKICAgICAgc29ja2V0VHlwZTogJ3RyZW5kRGF0YScsCiAgICAgIGNoYXJ0TmFtZTogJ3RyZW5kJywKICAgICAgdmFsdWU6ICcnCiAgICB9KQogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2NyZWVuQWRhcHRlcikKICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpCiAgfSwKICBkZXN0cm95ZWQgKCkgewogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2NyZWVuQWRhcHRlcikKICAgIC8vIOWcqOe7hOS7tumUgOavgeeahOaXtuWAmSwg6L+b6KGM5Zue6LCD5Ye95pWw55qE5Y+W5raICiAgICB0aGlzLiRzb2NrZXQudW5SZWdpc3RlckNhbGxCYWNrKCd0cmVuZERhdGEnKQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHNlbGVjdFR5cGVzICgpIHsKICAgICAgaWYgKCF0aGlzLmFsbERhdGEpIHsKICAgICAgICByZXR1cm4gW10KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5hbGxEYXRhLnR5cGUuZmlsdGVyKGl0ZW0gPT4gewogICAgICAgICAgcmV0dXJuIGl0ZW0ua2V5ICE9PSB0aGlzLmNob2ljZVR5cGUKICAgICAgICB9KQogICAgICB9CiAgICB9LAogICAgc2hvd1RpdGxlICgpIHsKICAgICAgaWYgKCF0aGlzLmFsbERhdGEpIHsKICAgICAgICByZXR1cm4gJycKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5hbGxEYXRhW3RoaXMuY2hvaWNlVHlwZV0udGl0bGUKICAgICAgfQogICAgfSwKICAgIC8vIOiuvue9rue7meagh+mimOeahOagt+W8jwogICAgY29tU3R5bGUgKCkgewogICAgICByZXR1cm4gewogICAgICAgIGZvbnRTaXplOiB0aGlzLnRpdGxlRm9udFNpemUgKyAncHgnLAogICAgICAgIGNvbG9yOiBnZXRUaGVtZVZhbHVlKHRoaXMudGhlbWUpLnRpdGxlQ29sb3IKICAgICAgfQogICAgfSwKICAgIG1hcmdpblN0eWxlICgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBtYXJnaW5MZWZ0OiB0aGlzLnRpdGxlRm9udFNpemUgKyAncHgnCiAgICAgIH0KICAgIH0sCiAgICAuLi5tYXBTdGF0ZShbJ3RoZW1lJ10pCiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0Q2hhcnQgKCkgewogICAgICB0aGlzLmNoYXJ0SW5zdGFuZSA9IHRoaXMuJGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLnRyZW5kX3JlZiwgdGhpcy50aGVtZSkKICAgICAgY29uc3QgaW5pdE9wdGlvbiA9IHsKICAgICAgICBncmlkOiB7CiAgICAgICAgICBsZWZ0OiAnMyUnLAogICAgICAgICAgdG9wOiAnMzUlJywKICAgICAgICAgIHJpZ2h0OiAnNCUnLAogICAgICAgICAgYm90dG9tOiAnMSUnLAogICAgICAgICAgY29udGFpbkxhYmVsOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnYXhpcycKICAgICAgICB9LAogICAgICAgIGxlZ2VuZDogewogICAgICAgICAgbGVmdDogMjAsCiAgICAgICAgICB0b3A6ICcxNSUnLAogICAgICAgICAgaWNvbjogJ2NpcmNsZScKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLAogICAgICAgICAgYm91bmRhcnlHYXA6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogJ3ZhbHVlJwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuZS5zZXRPcHRpb24oaW5pdE9wdGlvbikKICAgIH0sCiAgICAvLyByZXQg5bCx5piv5pyN5Yqh56uv5Y+R6YCB57uZ5a6i5oi356uv55qE5Zu+6KGo55qE5pWw5o2uCiAgICBnZXREYXRhIChyZXQpIHsKICAgICAgLy8gYXdhaXQgdGhpcy4kaHR0cC5nZXQoKQogICAgICAvLyDlr7lhbGxEYXRh6L+b6KGM6LWL5YC8CiAgICAgIC8vIGNvbnN0IHsgZGF0YTogcmV0IH0gPSBhd2FpdCB0aGlzLiRodHRwLmdldCgndHJlbmQnKQogICAgICB0aGlzLmFsbERhdGEgPSByZXQKICAgICAgY29uc29sZS5sb2codGhpcy5hbGxEYXRhKQogICAgICB0aGlzLnVwZGF0ZUNoYXJ0KCkKICAgIH0sCiAgICB1cGRhdGVDaGFydCAoKSB7CiAgICAgIC8vIOWNiumAj+aYjueahOminOiJsuWAvAogICAgICBjb25zdCBjb2xvckFycjEgPSBbCiAgICAgICAgJ3JnYmEoMTEsIDE2OCwgNDQsIDAuNSknLAogICAgICAgICdyZ2JhKDQ0LCAxMTAsIDI1NSwgMC41KScsCiAgICAgICAgJ3JnYmEoMjIsIDI0MiwgMjE3LCAwLjUpJywKICAgICAgICAncmdiYSgyNTQsIDMzLCAzMCwgMC41KScsCiAgICAgICAgJ3JnYmEoMjUwLCAxMDUsIDAsIDAuNSknCiAgICAgIF0KICAgICAgLy8g5YWo6YCP5piO55qE6aKc6Imy5YC8CiAgICAgIGNvbnN0IGNvbG9yQXJyMiA9IFsKICAgICAgICAncmdiYSgxMSwgMTY4LCA0NCwgMCknLAogICAgICAgICdyZ2JhKDQ0LCAxMTAsIDI1NSwgMCknLAogICAgICAgICdyZ2JhKDIyLCAyNDIsIDIxNywgMCknLAogICAgICAgICdyZ2JhKDI1NCwgMzMsIDMwLCAwKScsCiAgICAgICAgJ3JnYmEoMjUwLCAxMDUsIDAsIDApJwogICAgICBdCiAgICAgIC8vIOWkhOeQhuaVsOaNrgogICAgICAvLyDnsbvnm67ovbTnmoTmlbDmja4KICAgICAgY29uc3QgdGltZUFyciA9IHRoaXMuYWxsRGF0YS5jb21tb24ubW9udGgKICAgICAgLy8geei9tOeahOaVsOaNriBzZXJpZXPkuIvnmoTmlbDmja4KICAgICAgY29uc3QgdmFsdWVBcnIgPSB0aGlzLmFsbERhdGFbdGhpcy5jaG9pY2VUeXBlXS5kYXRhCiAgICAgIGNvbnN0IHNlcmllc0FyciA9IHZhbHVlQXJyLm1hcCgoaXRlbSwgaW5kZXgpID0+IHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbmFtZTogaXRlbS5uYW1lLAogICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgZGF0YTogaXRlbS5kYXRhLAogICAgICAgICAgc3RhY2s6IHRoaXMuY2hvaWNlVHlwZSwKICAgICAgICAgIGFyZWFTdHlsZTogewogICAgICAgICAgICBjb2xvcjogbmV3IHRoaXMuJGVjaGFydHMuZ3JhcGhpYy5MaW5lYXJHcmFkaWVudCgwLCAwLCAwLCAxLCBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yQXJyMVtpbmRleF0KICAgICAgICAgICAgICB9LCAvLyAlMOeahOminOiJsuWAvAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG9mZnNldDogMSwKICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvckFycjJbaW5kZXhdCiAgICAgICAgICAgICAgfSAvLyAxMDAl55qE6aKc6Imy5YC8CiAgICAgICAgICAgIF0pCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KQogICAgICAvLyDlm77kvovnmoTmlbDmja4KICAgICAgY29uc3QgbGVnZW5kQXJyID0gdmFsdWVBcnIubWFwKGl0ZW0gPT4gewogICAgICAgIHJldHVybiBpdGVtLm5hbWUKICAgICAgfSkKICAgICAgY29uc3QgZGF0YU9wdGlvbiA9IHsKICAgICAgICB4QXhpczogewogICAgICAgICAgZGF0YTogdGltZUFycgogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBkYXRhOiBsZWdlbmRBcnIKICAgICAgICB9LAogICAgICAgIHNlcmllczogc2VyaWVzQXJyCiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmUuc2V0T3B0aW9uKGRhdGFPcHRpb24pCiAgICB9LAogICAgc2NyZWVuQWRhcHRlciAoKSB7CiAgICAgIHRoaXMudGl0bGVGb250U2l6ZSA9IHRoaXMuJHJlZnMudHJlbmRfcmVmLm9mZnNldFdpZHRoIC8gMTAwICogMy42CiAgICAgIGNvbnN0IGFkYXB0ZXJPcHRpb24gPSB7CiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBpdGVtV2lkdGg6IHRoaXMudGl0bGVGb250U2l6ZSwKICAgICAgICAgIGl0ZW1IZWlnaHQ6IHRoaXMudGl0bGVGb250U2l6ZSwKICAgICAgICAgIGl0ZW1HYXA6IHRoaXMudGl0bGVGb250U2l6ZSwKICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICBmb250U2l6ZTogdGhpcy50aXRsZUZvbnRTaXplIC8gMgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuZS5zZXRPcHRpb24oYWRhcHRlck9wdGlvbikKICAgICAgdGhpcy5jaGFydEluc3RhbmUucmVzaXplKCkKICAgIH0sCiAgICBoYW5kbGVTZWxlY3QgKGN1cnJlbnRUeXBlKSB7CiAgICAgIHRoaXMuY2hvaWNlVHlwZSA9IGN1cnJlbnRUeXBlCiAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKQogICAgICB0aGlzLnNob3dDaG9pY2UgPSBmYWxzZQogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHRoZW1lICgpIHsKICAgICAgY29uc29sZS5sb2coJ+S4u+mimOWIh+aNouS6hicpCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5lLmRpc3Bvc2UoKSAvLyDplIDmr4HlvZPliY3nmoTlm77ooagKICAgICAgdGhpcy5pbml0Q2hhcnQoKSAvLyDph43mlrDku6XmnIDmlrDnmoTkuLvpopjlkI3np7DliJ3lp4vljJblm77ooajlr7nosaEKICAgICAgdGhpcy5zY3JlZW5BZGFwdGVyKCkgLy8g5a6M5oiQ5bGP5bmV55qE6YCC6YWNCiAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKSAvLyDmm7TmlrDlm77ooajnmoTlsZXnpLoKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Trend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"Trend.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"com-container\">\n    <div class=\"title\" :style=\"comStyle\">\n      <span>{{ '❤ ' +  showTitle }}</span>\n      <span class=\"iconfont title-icon\" :style=\"comStyle\"  @click=\"showChoice = !showChoice\">&#xe6eb;</span>\n      <div class=\"select-con\" v-show=\"showChoice\" :style=\"marginStyle\">\n        <div class=\"select-item\" v-for=\"item in selectTypes\" :key=\"item.key\" @click=\"handleSelect(item.key)\">\n          {{ item.text }}\n        </div>\n      </div>\n    </div>\n    <div class=\"com-chart\" ref=\"trend_ref\"></div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { getThemeValue } from '@/utils/theme_utils'\nexport default {\n  data () {\n    return {\n      chartInstane: null,\n      allData: null, // 从服务器中获取的所有数据\n      showChoice: false, // 是否显示可选项\n      choiceType: 'map', // 显示的数据类型\n      titleFontSize: 0 // 指明标题的字体大小\n    }\n  },\n  created () {\n    // 在组件创建完成之后 进行回调函数的注册\n    this.$socket.registerCallBack('trendData', this.getData)\n  },\n  mounted () {\n    this.initChart()\n    // this.getData()\n    // 发送数据给服务器, 告诉服务器, 我现在需要数据\n    this.$socket.send({\n      action: 'getData',\n      socketType: 'trendData',\n      chartName: 'trend',\n      value: ''\n    })\n    window.addEventListener('resize', this.screenAdapter)\n    this.screenAdapter()\n  },\n  destroyed () {\n    window.removeEventListener('resize', this.screenAdapter)\n    // 在组件销毁的时候, 进行回调函数的取消\n    this.$socket.unRegisterCallBack('trendData')\n  },\n  computed: {\n    selectTypes () {\n      if (!this.allData) {\n        return []\n      } else {\n        return this.allData.type.filter(item => {\n          return item.key !== this.choiceType\n        })\n      }\n    },\n    showTitle () {\n      if (!this.allData) {\n        return ''\n      } else {\n        return this.allData[this.choiceType].title\n      }\n    },\n    // 设置给标题的样式\n    comStyle () {\n      return {\n        fontSize: this.titleFontSize + 'px',\n        color: getThemeValue(this.theme).titleColor\n      }\n    },\n    marginStyle () {\n      return {\n        marginLeft: this.titleFontSize + 'px'\n      }\n    },\n    ...mapState(['theme'])\n  },\n  methods: {\n    initChart () {\n      this.chartInstane = this.$echarts.init(this.$refs.trend_ref, this.theme)\n      const initOption = {\n        grid: {\n          left: '3%',\n          top: '35%',\n          right: '4%',\n          bottom: '1%',\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          left: 20,\n          top: '15%',\n          icon: 'circle'\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false\n        },\n        yAxis: {\n          type: 'value'\n        }\n      }\n      this.chartInstane.setOption(initOption)\n    },\n    // ret 就是服务端发送给客户端的图表的数据\n    getData (ret) {\n      // await this.$http.get()\n      // 对allData进行赋值\n      // const { data: ret } = await this.$http.get('trend')\n      this.allData = ret\n      console.log(this.allData)\n      this.updateChart()\n    },\n    updateChart () {\n      // 半透明的颜色值\n      const colorArr1 = [\n        'rgba(11, 168, 44, 0.5)',\n        'rgba(44, 110, 255, 0.5)',\n        'rgba(22, 242, 217, 0.5)',\n        'rgba(254, 33, 30, 0.5)',\n        'rgba(250, 105, 0, 0.5)'\n      ]\n      // 全透明的颜色值\n      const colorArr2 = [\n        'rgba(11, 168, 44, 0)',\n        'rgba(44, 110, 255, 0)',\n        'rgba(22, 242, 217, 0)',\n        'rgba(254, 33, 30, 0)',\n        'rgba(250, 105, 0, 0)'\n      ]\n      // 处理数据\n      // 类目轴的数据\n      const timeArr = this.allData.common.month\n      // y轴的数据 series下的数据\n      const valueArr = this.allData[this.choiceType].data\n      const seriesArr = valueArr.map((item, index) => {\n        return {\n          name: item.name,\n          type: 'line',\n          data: item.data,\n          stack: this.choiceType,\n          areaStyle: {\n            color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n              {\n                offset: 0,\n                color: colorArr1[index]\n              }, // %0的颜色值\n              {\n                offset: 1,\n                color: colorArr2[index]\n              } // 100%的颜色值\n            ])\n          }\n        }\n      })\n      // 图例的数据\n      const legendArr = valueArr.map(item => {\n        return item.name\n      })\n      const dataOption = {\n        xAxis: {\n          data: timeArr\n        },\n        legend: {\n          data: legendArr\n        },\n        series: seriesArr\n      }\n      this.chartInstane.setOption(dataOption)\n    },\n    screenAdapter () {\n      this.titleFontSize = this.$refs.trend_ref.offsetWidth / 100 * 3.6\n      const adapterOption = {\n        legend: {\n          itemWidth: this.titleFontSize,\n          itemHeight: this.titleFontSize,\n          itemGap: this.titleFontSize,\n          textStyle: {\n            fontSize: this.titleFontSize / 2\n          }\n        }\n      }\n      this.chartInstane.setOption(adapterOption)\n      this.chartInstane.resize()\n    },\n    handleSelect (currentType) {\n      this.choiceType = currentType\n      this.updateChart()\n      this.showChoice = false\n    }\n  },\n  watch: {\n    theme () {\n      console.log('主题切换了')\n      this.chartInstane.dispose() // 销毁当前的图表\n      this.initChart() // 重新以最新的主题名称初始化图表对象\n      this.screenAdapter() // 完成屏幕的适配\n      this.updateChart() // 更新图表的展示\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.title {\n  position: absolute;\n  left: 20px;\n  top: 20px;\n  z-index: 10;\n  color: white;\n  .title-icon {\n    margin-left: 10px;\n    cursor: pointer;\n  }\n  .select-con {\n    background-color: #222733;\n  }\n}\n</style>\n"]}]}