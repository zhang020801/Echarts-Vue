{"remainingRequest":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\src\\components\\Hot.vue?vue&type=style&index=0&id=4011cbcd&lang=less&scoped=true&","dependencies":[{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\src\\components\\Hot.vue","mtime":1614874527797},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Webstorm_program\\Echarts-Vue\\Day03\\Echarts-Vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hcnItbGVmdCB7CiAgcG9zaXRpb246YWJzb2x1dGU7CiAgbGVmdDogMTAlOwogIHRvcDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsKICBjdXJzb3I6IHBvaW50ZXI7CiAgY29sb3I6IHdoaXRlOwp9Ci5hcnItcmlnaHQgewogIHBvc2l0aW9uOmFic29sdXRlOwogIHJpZ2h0OiAxMCU7CiAgdG9wOiA1MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOwogIGN1cnNvcjogcG9pbnRlcjsKICBjb2xvcjogd2hpdGU7Cn0KLmNhdC1uYW1lIHsKICBwb3NpdGlvbjphYnNvbHV0ZTsKICBsZWZ0OiA4MCU7CiAgYm90dG9tOiAyMHB4OwogIGNvbG9yOiB3aGl0ZTsKfQo="},{"version":3,"sources":["Hot.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Hot.vue","sourceRoot":"src/components","sourcesContent":["<!-- 热销商品图表 -->\n<template>\n  <div class='com-container'>\n    <div class='com-chart' ref='hot_ref'></div>\n    <span class=\"iconfont arr-left\" @click=\"toLeft\" :style=\"comStyle\">&#xe6ef;</span>\n    <span class=\"iconfont arr-right\" @click=\"toRight\" :style=\"comStyle\">&#xe6ed;</span>\n    <span class=\"cat-name\" :style=\"comStyle\">{{ catName }}</span>\n  </div>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  import axios from 'axios'\n  import { getProvinceMapInfo } from '@/utils/map_utils'\n  export default {\n    data () {\n      return {\n        chartInstance: null,\n        allData: null,\n        currentIndex: 0, // 当前所展示出的一级分类数据\n        titleFontSize: 0\n      }\n    },\n    computed: {\n      ...mapState(['theme']),\n      catName () {\n        if (!this.allData) {\n          return ''\n        } else {\n          return this.allData[this.currentIndex].name\n        }\n      },\n      comStyle () {\n        return {\n          fontSize: this.titleFontSize + 'px'\n        }\n      }\n    },\n    mounted () {\n      this.initChart()\n      this.getData()\n      window.addEventListener('resize', this.screenAdapter)\n      this.screenAdapter()\n    },\n    destroyed () {\n      window.removeEventListener('resize', this.screenAdapter)\n    },\n    methods: {\n      initChart () {\n        this.chartInstance = this.$echarts.init(this.$refs.hot_ref, this.theme)\n        const initOption = {\n          title: {\n            text: '💚 热销商品的占比',\n            left: 20,\n            top: 20\n          },\n          legend: {\n            top: '15%',\n            icon: 'circle'\n          },\n          tooltip: {\n            show: true,\n            formatter: arg => {\n              // console.log(arg)\n              const thirdCategory = arg.data.children\n              // 计算出所有三级分类的数值总和\n              let total = 0\n              thirdCategory.forEach(item => {\n                total += item.value\n              })\n              let retStr = ''\n              thirdCategory.forEach(item => {\n                retStr += `\n              ${item.name}:${parseInt(item.value / total * 100) + '%'}\n              <br/>\n              `\n              })\n              return retStr\n            }\n          },\n          series: [\n            {\n              type: 'pie',\n              label: {\n                show: false\n              },\n              emphasis: {\n                label: {\n                  show: true\n                },\n                labelLine: {\n                  show: false\n                }\n              }\n            }\n          ]\n        }\n        this.chartInstance.setOption(initOption)\n      },\n      async getData () {\n        // 获取服务器的数据, 对this.allData进行赋值之后, 调用updateChart方法更新图表\n        const { data: ret } = await this.$http.get('hotproduct')\n        this.allData = ret\n        console.log(this.allData)\n        this.updateChart()\n      },\n      updateChart () {\n        // 处理图表需要的数据\n        const legendData = this.allData[this.currentIndex].children.map(item => {\n          return item.name\n        })\n        const seriesData = this.allData[this.currentIndex].children.map(item => {\n          return {\n            name: item.name,\n            value: item.value,\n            children: item.children // 新增加children的原因是为了在tooltip中的formatter的回调函数中,来拿到这个二级分类下的三级分类数据\n          }\n        })\n        const dataOption = {\n          legend: {\n            data: legendData\n          },\n          series: [\n            {\n              data: seriesData\n            }\n          ]\n        }\n        this.chartInstance.setOption(dataOption)\n      },\n      screenAdapter () {\n        this.titleFontSize = this.$refs.hot_ref.offsetWidth / 100 * 3.6\n        const adapterOption = {\n          title: {\n            textStyle: {\n              fontSize: this.titleFontSize\n            }\n          },\n          legend: {\n            itemWidth: this.titleFontSize,\n            itemHeight: this.titleFontSize,\n            itemGap: this.titleFontSize / 2,\n            textStyle: {\n              fontSize: this.titleFontSize / 2\n            }\n          },\n          series: [\n            {\n              radius: this.titleFontSize * 4.5,\n              center: ['50%', '60%']\n            }\n          ]\n        }\n        this.chartInstance.setOption(adapterOption)\n        this.chartInstance.resize()\n      },\n      toLeft () {\n        this.currentIndex--\n        if (this.currentIndex < 0) {\n          this.currentIndex = this.allData.length - 1\n        }\n        this.updateChart()\n      },\n      toRight () {\n        this.currentIndex++\n        if (this.currentIndex > this.allData.length - 1) {\n          this.currentIndex = 0\n        }\n        this.updateChart()\n      }\n    },\n    watch: {\n      theme () {\n        console.log('主题切换了')\n        this.chartInstance.dispose() // 销毁当前的图表\n        this.initChart() // 重新以最新的主题名称初始化图表对象\n        this.screenAdapter() // 完成屏幕的适配\n        this.updateChart() // 更新图表的展示\n      }\n    }\n  }\n</script>\n\n<style lang='less' scoped>\n  .arr-left {\n    position:absolute;\n    left: 10%;\n    top: 50%;\n    transform: translateY(-50%);\n    cursor: pointer;\n    color: white;\n  }\n  .arr-right {\n    position:absolute;\n    right: 10%;\n    top: 50%;\n    transform: translateY(-50%);\n    cursor: pointer;\n    color: white;\n  }\n  .cat-name {\n    position:absolute;\n    left: 80%;\n    bottom: 20px;\n    color: white;\n  }\n</style>\n"]}]}